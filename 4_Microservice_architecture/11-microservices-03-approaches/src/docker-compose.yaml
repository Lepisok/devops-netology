volumes:
  data:
  prometheus-data:
  grafana_data:
  esdata_warm:
  esdata_hot:

services:
  storage:
    image: minio/minio:latest
    command: server /data
    restart: always
    networks: 
      - test
    expose: 
      - 9000
    environment:
      MINIO_ROOT_USER: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${Storage_Secret:-STORAGE_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  elasticsearch-warm:
    image: elasticsearch:7.17.9
    container_name: elasticsearch-warm
    environment:
      - node.name=elasticsearch-warm
      - cluster.name=elasticsearch-cluster
      - cluster.initial_master_nodes=elasticsearch-hot,elasticsearch-warm
      - discovery.seed_hosts=elasticsearch-hot
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata_warm:/usr/share/elasticsearch/data
    networks:
      - test

  elasticsearch-hot:
    image: elasticsearch:7.17.9
    container_name: elasticsearch-hot
    environment:
      - node.name=elasticsearch-hot
      - cluster.name=elasticsearch-cluster
      - cluster.initial_master_nodes=elasticsearch-hot,elasticsearch-warm
      - discovery.seed_hosts=elasticsearch-warm
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata_hot:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9200
    depends_on:
      - elasticsearch-warm
    networks:
      - test
  
  vector:
    container_name: vector
    image: timberio/vector:0.22.0-debian
    expose:
      - 8686
    ports:
      - 8686:8686
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs/vector.toml:/etc/vector/vector.toml
    networks:
      - test

  kibana:
    image: kibana:7.17.9
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch-hot:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch-hot:9200","http://elasticsearch-warm:9200"]'
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch-hot
      - elasticsearch-warm
    networks:
      - test

  createbuckets:
    image: minio/mc
    depends_on:
      - storage
    restart: on-failure
    networks: 
      - test
    entrypoint: > 
      /bin/sh -c "      
      /usr/bin/mc config host add storage http://storage:9000 ${Storage_AccessKey-STORAGE_ACCESS_KEY} ${Storage_Secret-STORAGE_SECRET_KEY} &&
      /usr/bin/mc mb --ignore-existing storage/${Storage_Bucket:-data} &&
      /usr/bin/mc policy set download storage/${Storage_Bucket:-data} &&
      exit 0;
      "
      
  uploader:
    build: ./uploader
    depends_on:
      - storage
      - createbuckets
    networks: 
      - test
    expose: 
      - 3000
    environment:
      PORT: 3000
      S3_HOST: storage
      S3_PORT: 9000
      S3_ACCESS_KEY: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      S3_ACCESS_SECRET: ${Storage_Secret:-STORAGE_SECRET_KEY}
      S3_BUCKET: ${Storage_Bucket:-STORAGE_BUCKET}
  
  security:
    build: ./security
    networks: 
      - test
    expose: 
      - 3000
    environment:
      PORT: 3000

  gateway:
    image: nginx:alpine
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    networks: 
      - test
    ports:
      - "80:8080"      
    depends_on:
      - storage
      - uploader
      - security

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks: 
      - test    
    ports: 
      - "9090:9090"
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks: 
      - test    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
    ports:
      - "3000:3000"
    volumes:
      - "./grafana/datasources:/etc/grafana/provisioning/datasources"
      - "./grafana/dashboards:/etc/grafana/provisioning/dashboards"
      - "./grafana/dashboards_files:/var/lib/grafana/dashboards"
    depends_on: 
      - prometheus

networks:
  test:
    name: test