volumes:
  data:
  prometheus-data:
  grafana_data:

services:
  storage:
    image: minio/minio:latest
    command: server /data
    restart: always
    networks: 
      - test
    expose: 
      - 9000
    environment:
      MINIO_ROOT_USER: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${Storage_Secret:-STORAGE_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  elasticsearch:
    image: elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    env_file:
      - .env
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - 9200:9200
      - 9300:9300
  
  vector:
    container_name: vector
    image: timberio/vector:0.22.0-debian
    expose:
      - 8686
    ports:
      - 8686:8686
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - test

  kibana:
    image: kibana:7.17.9
    container_name: kibana
    env_file:
      - .env
    ports:
      - 5601:5601
    networks:
      - test

  createbuckets:
    image: minio/mc
    depends_on:
      - storage
    restart: on-failure
    networks: 
      - test
    entrypoint: > 
      /bin/sh -c "      
      /usr/bin/mc config host add storage http://storage:9000 ${Storage_AccessKey-STORAGE_ACCESS_KEY} ${Storage_Secret-STORAGE_SECRET_KEY} &&
      /usr/bin/mc mb --ignore-existing storage/${Storage_Bucket:-data} &&
      /usr/bin/mc policy set download storage/${Storage_Bucket:-data} &&
      exit 0;
      "
      
  uploader:
    build: ./uploader
    depends_on:
      - storage
      - createbuckets
    networks: 
      - test
    expose: 
      - 3000
    environment:
      PORT: 3000
      S3_HOST: storage
      S3_PORT: 9000
      S3_ACCESS_KEY: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      S3_ACCESS_SECRET: ${Storage_Secret:-STORAGE_SECRET_KEY}
      S3_BUCKET: ${Storage_Bucket:-STORAGE_BUCKET}
  
  security:
    build: ./security
    networks: 
      - test
    expose: 
      - 3000
    environment:
      PORT: 3000

  gateway:
    image: nginx:alpine
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    networks: 
      - test
    ports:
      - "80:8080"      
    depends_on:
      - storage
      - uploader
      - security

networks:
  test:
    name: test